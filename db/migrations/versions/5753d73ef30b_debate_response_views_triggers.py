"""debate_response_views_triggers

Revision ID: 5753d73ef30b
Revises: 6ced321652c1
Create Date: 2023-10-27 21:44:18.886436

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_grant_table import PGGrantTable
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text
from alembic_utils.pg_view import PGView
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "5753d73ef30b"
down_revision: Union[str, None] = "6ced321652c1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_debates_view = PGView(
        schema="public",
        signature="debates_view",
        definition="SELECT d.id, d.title, ARRAY_AGG(DISTINCT dc.name) as category_names,\n        d.summary, d.picture_url, COUNT(r.id) as response_count,\n        d.created_at, ucbi.username as created_by, ul.username as leader,\n            (\n                CASE\n                    WHEN NOW() > d.end_at THEN 'Finished'\n                    WHEN EXTRACT(DAY FROM d.end_at - NOW()) > 0 THEN\n                        EXTRACT(DAY FROM d.end_at - NOW()) || 'd ' ||\n                        EXTRACT(HOUR FROM d.end_at - NOW()) || 'h ' ||\n                        EXTRACT(MINUTE FROM d.end_at - NOW()) || 'm'\n                    WHEN EXTRACT(HOUR FROM d.end_at - NOW()) > 0 THEN\n                        EXTRACT(HOUR FROM d.end_at - NOW()) || 'h ' ||\n                        EXTRACT(MINUTE FROM d.end_at - NOW()) || 'm'\n                    ELSE\n                        EXTRACT(MINUTE FROM d.end_at - NOW()) || 'm'\n                END\n            ) AS end_at\n        FROM debate d\n        LEFT JOIN debate_debate_category_table ddct ON ddct.debate_id = d.id\n        LEFT JOIN debate_category dc ON dc.id = ddct.debate_category_id\n        LEFT JOIN response r ON r.debate_id = d.id\n        LEFT JOIN \"user\" ucbi ON ucbi.id = d.created_by_id\n        LEFT JOIN \"user\" ul ON ul.id = d.leader_id\n        GROUP BY d.id, ucbi.username, ul.username\n        ORDER BY d.id",
    )
    op.create_entity(public_debates_view)

    public_responses_view = PGView(
        schema="public",
        signature="responses_view",
        definition="WITH vote_counts AS (\n            SELECT\n                v.response_id,\n                SUM(CASE WHEN v.vote_type = 'agree' THEN 1 ELSE 0 END) AS agree_count,\n                SUM(CASE WHEN v.vote_type = 'disagree' THEN 1 ELSE 0 END) AS disagree_count\n            FROM vote v\n            GROUP BY v.response_id\n        )\n        \n        SELECT r.id, r.debate_id, r.body, ucbi.username as created_by, ucbi.id as created_by_id,\n        COALESCE(vc.agree_count, 0) as agree, \n        COALESCE(vc.disagree_count, 0) as disagree,\n        COALESCE(vc.agree_count, 0) - COALESCE(vc.disagree_count, 0) as vote_difference\n        FROM response r\n        JOIN \"user\" ucbi ON ucbi.id = r.created_by_id\n        LEFT JOIN vote_counts vc ON vc.response_id = r.id\n        ORDER BY r.id",
    )
    op.create_entity(public_responses_view)

    public_update_leader_function = PGFunction(
        schema="public",
        signature="update_leader_function()",
        definition="RETURNS TRIGGER AS $$\nDECLARE\n   debate_id INT;\n   response_id INT;\nBEGIN\n    IF TG_OP = 'INSERT' THEN\n        response_id := NEW.response_id;\n    ELSIF TG_OP = 'DELETE' THEN\n        response_id := OLD.response_id;\n    END IF;\n   RAISE NOTICE 'Debug message\\: Variable value = %', debate_id;\n\n   SELECT rv.debate_id INTO debate_id\n   FROM responses_view AS rv\n   WHERE rv.id = response_id;\n\n   UPDATE debate AS d\n   SET leader_id = (\n       SELECT\n           CASE\n               WHEN COUNT(*) > 1 THEN NULL\n               ELSE MAX(rv.created_by_id)\n           END\n       FROM responses_view AS rv\n       WHERE d.id = rv.debate_id\n       GROUP BY rv.vote_difference\n       ORDER BY rv.vote_difference DESC\n       LIMIT 1\n   )\n   WHERE d.id = debate_id;\n   RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql",
    )
    op.create_entity(public_update_leader_function)

    public_vote_update_leader_on_vote_creation_trigger = PGTrigger(
        schema="public",
        signature="update_leader_on_vote_creation_trigger",
        on_entity="public.vote",
        is_constraint=False,
        definition="AFTER INSERT OR DELETE ON vote\n    FOR EACH ROW\n    EXECUTE FUNCTION update_leader_function()",
    )
    op.create_entity(public_vote_update_leader_on_vote_creation_trigger)

    public_alembic_version_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=["version_num"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.drop_entity(public_alembic_version_debateitdbowner_insert)

    public_alembic_version_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=["version_num"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.drop_entity(public_alembic_version_debateitdbowner_references)

    public_alembic_version_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=["version_num"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.drop_entity(public_alembic_version_debateitdbowner_select)

    public_alembic_version_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=["version_num"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.drop_entity(public_alembic_version_debateitdbowner_update)

    public_debate_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="debate",
        columns=[
            "created_at",
            "created_by_id",
            "end_at",
            "id",
            "leader_id",
            "picture_url",
            "summary",
            "title",
        ],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debateitdbowner_insert)

    public_debate_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="debate",
        columns=[
            "created_at",
            "created_by_id",
            "end_at",
            "id",
            "leader_id",
            "picture_url",
            "summary",
            "title",
        ],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debateitdbowner_references)

    public_debate_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="debate",
        columns=[
            "created_at",
            "created_by_id",
            "end_at",
            "id",
            "leader_id",
            "picture_url",
            "summary",
            "title",
        ],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debateitdbowner_select)

    public_debate_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="debate",
        columns=[
            "created_at",
            "created_by_id",
            "end_at",
            "id",
            "leader_id",
            "picture_url",
            "summary",
            "title",
        ],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debateitdbowner_update)

    public_debate_category_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=["id", "name"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_category_debateitdbowner_insert)

    public_debate_category_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=["id", "name"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_category_debateitdbowner_references)

    public_debate_category_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=["id", "name"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_category_debateitdbowner_select)

    public_debate_category_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=["id", "name"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_category_debateitdbowner_update)

    public_debate_debate_category_table_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=["debate_category_id", "debate_id"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debate_category_table_debateitdbowner_insert)

    public_debate_debate_category_table_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=["debate_category_id", "debate_id"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debate_category_table_debateitdbowner_references)

    public_debate_debate_category_table_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=["debate_category_id", "debate_id"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debate_category_table_debateitdbowner_select)

    public_debate_debate_category_table_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=["debate_category_id", "debate_id"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debate_category_table_debateitdbowner_update)

    public_response_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="response",
        columns=["body", "created_by_id", "debate_id", "id"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.drop_entity(public_response_debateitdbowner_insert)

    public_response_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="response",
        columns=["body", "created_by_id", "debate_id", "id"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.drop_entity(public_response_debateitdbowner_references)

    public_response_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="response",
        columns=["body", "created_by_id", "debate_id", "id"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.drop_entity(public_response_debateitdbowner_select)

    public_response_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="response",
        columns=["body", "created_by_id", "debate_id", "id"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.drop_entity(public_response_debateitdbowner_update)

    public_user_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="user",
        columns=["id", "profile_picture_url", "username"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.drop_entity(public_user_debateitdbowner_insert)

    public_user_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="user",
        columns=["id", "profile_picture_url", "username"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.drop_entity(public_user_debateitdbowner_references)

    public_user_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="user",
        columns=["id", "profile_picture_url", "username"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.drop_entity(public_user_debateitdbowner_select)

    public_user_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="user",
        columns=["id", "profile_picture_url", "username"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.drop_entity(public_user_debateitdbowner_update)

    public_vote_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="vote",
        columns=["created_by_id", "id", "response_id", "vote_type"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.drop_entity(public_vote_debateitdbowner_insert)

    public_vote_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="vote",
        columns=["created_by_id", "id", "response_id", "vote_type"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.drop_entity(public_vote_debateitdbowner_references)

    public_vote_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="vote",
        columns=["created_by_id", "id", "response_id", "vote_type"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.drop_entity(public_vote_debateitdbowner_select)

    public_vote_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="vote",
        columns=["created_by_id", "id", "response_id", "vote_type"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.drop_entity(public_vote_debateitdbowner_update)

    public_alembic_version_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.drop_entity(public_alembic_version_debateitdbowner_delete)

    public_alembic_version_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.drop_entity(public_alembic_version_debateitdbowner_truncate)

    public_alembic_version_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.drop_entity(public_alembic_version_debateitdbowner_trigger)

    public_user_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="user",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.drop_entity(public_user_debateitdbowner_delete)

    public_user_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="user",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.drop_entity(public_user_debateitdbowner_truncate)

    public_user_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="user",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.drop_entity(public_user_debateitdbowner_trigger)

    public_debate_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="debate",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debateitdbowner_delete)

    public_debate_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="debate",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debateitdbowner_truncate)

    public_debate_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="debate",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debateitdbowner_trigger)

    public_debate_category_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_category_debateitdbowner_delete)

    public_debate_category_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_category_debateitdbowner_truncate)

    public_debate_category_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_category_debateitdbowner_trigger)

    public_debate_debate_category_table_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debate_category_table_debateitdbowner_delete)

    public_debate_debate_category_table_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debate_category_table_debateitdbowner_truncate)

    public_debate_debate_category_table_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.drop_entity(public_debate_debate_category_table_debateitdbowner_trigger)

    public_vote_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="vote",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.drop_entity(public_vote_debateitdbowner_delete)

    public_vote_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="vote",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.drop_entity(public_vote_debateitdbowner_truncate)

    public_vote_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="vote",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.drop_entity(public_vote_debateitdbowner_trigger)

    public_response_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="response",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.drop_entity(public_response_debateitdbowner_delete)

    public_response_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="response",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.drop_entity(public_response_debateitdbowner_truncate)

    public_response_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="response",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.drop_entity(public_response_debateitdbowner_trigger)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_response_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="response",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.create_entity(public_response_debateitdbowner_trigger)

    public_response_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="response",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.create_entity(public_response_debateitdbowner_truncate)

    public_response_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="response",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.create_entity(public_response_debateitdbowner_delete)

    public_vote_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="vote",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.create_entity(public_vote_debateitdbowner_trigger)

    public_vote_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="vote",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.create_entity(public_vote_debateitdbowner_truncate)

    public_vote_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="vote",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.create_entity(public_vote_debateitdbowner_delete)

    public_debate_debate_category_table_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debate_category_table_debateitdbowner_trigger)

    public_debate_debate_category_table_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debate_category_table_debateitdbowner_truncate)

    public_debate_debate_category_table_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debate_category_table_debateitdbowner_delete)

    public_debate_category_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.create_entity(public_debate_category_debateitdbowner_trigger)

    public_debate_category_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.create_entity(public_debate_category_debateitdbowner_truncate)

    public_debate_category_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.create_entity(public_debate_category_debateitdbowner_delete)

    public_debate_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="debate",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debateitdbowner_trigger)

    public_debate_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="debate",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debateitdbowner_truncate)

    public_debate_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="debate",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debateitdbowner_delete)

    public_user_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="user",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.create_entity(public_user_debateitdbowner_trigger)

    public_user_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="user",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.create_entity(public_user_debateitdbowner_truncate)

    public_user_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="user",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.create_entity(public_user_debateitdbowner_delete)

    public_alembic_version_debateitdbowner_trigger = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=[],
        role="debateitdbowner",
        grant="TRIGGER",
        with_grant_option=True,
    )
    op.create_entity(public_alembic_version_debateitdbowner_trigger)

    public_alembic_version_debateitdbowner_truncate = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=[],
        role="debateitdbowner",
        grant="TRUNCATE",
        with_grant_option=True,
    )
    op.create_entity(public_alembic_version_debateitdbowner_truncate)

    public_alembic_version_debateitdbowner_delete = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=[],
        role="debateitdbowner",
        grant="DELETE",
        with_grant_option=True,
    )
    op.create_entity(public_alembic_version_debateitdbowner_delete)

    public_vote_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="vote",
        columns=["created_by_id", "id", "response_id", "vote_type"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.create_entity(public_vote_debateitdbowner_update)

    public_vote_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="vote",
        columns=["created_by_id", "id", "response_id", "vote_type"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.create_entity(public_vote_debateitdbowner_select)

    public_vote_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="vote",
        columns=["created_by_id", "id", "response_id", "vote_type"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.create_entity(public_vote_debateitdbowner_references)

    public_vote_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="vote",
        columns=["created_by_id", "id", "response_id", "vote_type"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.create_entity(public_vote_debateitdbowner_insert)

    public_user_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="user",
        columns=["id", "profile_picture_url", "username"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.create_entity(public_user_debateitdbowner_update)

    public_user_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="user",
        columns=["id", "profile_picture_url", "username"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.create_entity(public_user_debateitdbowner_select)

    public_user_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="user",
        columns=["id", "profile_picture_url", "username"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.create_entity(public_user_debateitdbowner_references)

    public_user_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="user",
        columns=["id", "profile_picture_url", "username"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.create_entity(public_user_debateitdbowner_insert)

    public_response_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="response",
        columns=["body", "created_by_id", "debate_id", "id"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.create_entity(public_response_debateitdbowner_update)

    public_response_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="response",
        columns=["body", "created_by_id", "debate_id", "id"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.create_entity(public_response_debateitdbowner_select)

    public_response_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="response",
        columns=["body", "created_by_id", "debate_id", "id"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.create_entity(public_response_debateitdbowner_references)

    public_response_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="response",
        columns=["body", "created_by_id", "debate_id", "id"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.create_entity(public_response_debateitdbowner_insert)

    public_debate_debate_category_table_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=["debate_category_id", "debate_id"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debate_category_table_debateitdbowner_update)

    public_debate_debate_category_table_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=["debate_category_id", "debate_id"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debate_category_table_debateitdbowner_select)

    public_debate_debate_category_table_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=["debate_category_id", "debate_id"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debate_category_table_debateitdbowner_references)

    public_debate_debate_category_table_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="debate_debate_category_table",
        columns=["debate_category_id", "debate_id"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debate_category_table_debateitdbowner_insert)

    public_debate_category_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=["id", "name"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.create_entity(public_debate_category_debateitdbowner_update)

    public_debate_category_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=["id", "name"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.create_entity(public_debate_category_debateitdbowner_select)

    public_debate_category_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=["id", "name"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.create_entity(public_debate_category_debateitdbowner_references)

    public_debate_category_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="debate_category",
        columns=["id", "name"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.create_entity(public_debate_category_debateitdbowner_insert)

    public_debate_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="debate",
        columns=[
            "created_at",
            "created_by_id",
            "end_at",
            "id",
            "leader_id",
            "picture_url",
            "summary",
            "title",
        ],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debateitdbowner_update)

    public_debate_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="debate",
        columns=[
            "created_at",
            "created_by_id",
            "end_at",
            "id",
            "leader_id",
            "picture_url",
            "summary",
            "title",
        ],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debateitdbowner_select)

    public_debate_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="debate",
        columns=[
            "created_at",
            "created_by_id",
            "end_at",
            "id",
            "leader_id",
            "picture_url",
            "summary",
            "title",
        ],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debateitdbowner_references)

    public_debate_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="debate",
        columns=[
            "created_at",
            "created_by_id",
            "end_at",
            "id",
            "leader_id",
            "picture_url",
            "summary",
            "title",
        ],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.create_entity(public_debate_debateitdbowner_insert)

    public_alembic_version_debateitdbowner_update = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=["version_num"],
        role="debateitdbowner",
        grant="UPDATE",
        with_grant_option=True,
    )
    op.create_entity(public_alembic_version_debateitdbowner_update)

    public_alembic_version_debateitdbowner_select = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=["version_num"],
        role="debateitdbowner",
        grant="SELECT",
        with_grant_option=True,
    )
    op.create_entity(public_alembic_version_debateitdbowner_select)

    public_alembic_version_debateitdbowner_references = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=["version_num"],
        role="debateitdbowner",
        grant="REFERENCES",
        with_grant_option=True,
    )
    op.create_entity(public_alembic_version_debateitdbowner_references)

    public_alembic_version_debateitdbowner_insert = PGGrantTable(
        schema="public",
        table="alembic_version",
        columns=["version_num"],
        role="debateitdbowner",
        grant="INSERT",
        with_grant_option=True,
    )
    op.create_entity(public_alembic_version_debateitdbowner_insert)

    public_vote_update_leader_on_vote_creation_trigger = PGTrigger(
        schema="public",
        signature="update_leader_on_vote_creation_trigger",
        on_entity="public.vote",
        is_constraint=False,
        definition="AFTER INSERT OR DELETE ON vote\n    FOR EACH ROW\n    EXECUTE FUNCTION update_leader_function()",
    )
    op.drop_entity(public_vote_update_leader_on_vote_creation_trigger)

    public_update_leader_function = PGFunction(
        schema="public",
        signature="update_leader_function()",
        definition="RETURNS TRIGGER AS $$\nDECLARE\n   debate_id INT;\n   response_id INT;\nBEGIN\n    IF TG_OP = 'INSERT' THEN\n        response_id := NEW.response_id;\n    ELSIF TG_OP = 'DELETE' THEN\n        response_id := OLD.response_id;\n    END IF;\n   RAISE NOTICE 'Debug message\\: Variable value = %', debate_id;\n\n   SELECT rv.debate_id INTO debate_id\n   FROM responses_view AS rv\n   WHERE rv.id = response_id;\n\n   UPDATE debate AS d\n   SET leader_id = (\n       SELECT\n           CASE\n               WHEN COUNT(*) > 1 THEN NULL\n               ELSE MAX(rv.created_by_id)\n           END\n       FROM responses_view AS rv\n       WHERE d.id = rv.debate_id\n       GROUP BY rv.vote_difference\n       ORDER BY rv.vote_difference DESC\n       LIMIT 1\n   )\n   WHERE d.id = debate_id;\n   RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_update_leader_function)

    public_responses_view = PGView(
        schema="public",
        signature="responses_view",
        definition="WITH vote_counts AS (\n            SELECT\n                v.response_id,\n                SUM(CASE WHEN v.vote_type = 'agree' THEN 1 ELSE 0 END) AS agree_count,\n                SUM(CASE WHEN v.vote_type = 'disagree' THEN 1 ELSE 0 END) AS disagree_count\n            FROM vote v\n            GROUP BY v.response_id\n        )\n        \n        SELECT r.id, r.debate_id, r.body, ucbi.username as created_by, ucbi.id as created_by_id,\n        COALESCE(vc.agree_count, 0) as agree, \n        COALESCE(vc.disagree_count, 0) as disagree,\n        COALESCE(vc.agree_count, 0) - COALESCE(vc.disagree_count, 0) as vote_difference\n        FROM response r\n        JOIN \"user\" ucbi ON ucbi.id = r.created_by_id\n        LEFT JOIN vote_counts vc ON vc.response_id = r.id\n        ORDER BY r.id",
    )
    op.drop_entity(public_responses_view)

    public_debates_view = PGView(
        schema="public",
        signature="debates_view",
        definition="SELECT d.id, d.title, ARRAY_AGG(DISTINCT dc.name) as category_names,\n        d.summary, d.picture_url, COUNT(r.id) as response_count,\n        d.created_at, ucbi.username as created_by, ul.username as leader,\n            (\n                CASE\n                    WHEN NOW() > d.end_at THEN 'Finished'\n                    WHEN EXTRACT(DAY FROM d.end_at - NOW()) > 0 THEN\n                        EXTRACT(DAY FROM d.end_at - NOW()) || 'd ' ||\n                        EXTRACT(HOUR FROM d.end_at - NOW()) || 'h ' ||\n                        EXTRACT(MINUTE FROM d.end_at - NOW()) || 'm'\n                    WHEN EXTRACT(HOUR FROM d.end_at - NOW()) > 0 THEN\n                        EXTRACT(HOUR FROM d.end_at - NOW()) || 'h ' ||\n                        EXTRACT(MINUTE FROM d.end_at - NOW()) || 'm'\n                    ELSE\n                        EXTRACT(MINUTE FROM d.end_at - NOW()) || 'm'\n                END\n            ) AS end_at\n        FROM debate d\n        LEFT JOIN debate_debate_category_table ddct ON ddct.debate_id = d.id\n        LEFT JOIN debate_category dc ON dc.id = ddct.debate_category_id\n        LEFT JOIN response r ON r.debate_id = d.id\n        LEFT JOIN \"user\" ucbi ON ucbi.id = d.created_by_id\n        LEFT JOIN \"user\" ul ON ul.id = d.leader_id\n        GROUP BY d.id, ucbi.username, ul.username\n        ORDER BY d.id",
    )
    op.drop_entity(public_debates_view)
    # ### end Alembic commands ###
