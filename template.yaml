AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  DebateIt API

  SAM Template for DebateIt API

Parameters:
  EnvironmentParameter:
    Type: String
  DatabaseSecretName:
    Type: String
  DatabaseNameParameter:
    Type: String
    Default: debateitdb
  LogLevel:
    Type: String
    Description: Log level for the api
    Default: INFO


Resources:
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group for the Database
      GroupName: !Sub "debateit-db-sg-${EnvironmentParameter}"
      SecurityGroupEgress: 
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - Description: Allow all access for now
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      VpcId: vpc-00e45ef046f0114bd
  DebateItDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref DatabaseSecretName
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "debateitdbowner"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
        ExcludePunctuation: true
  DebateItDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBName: !Ref DatabaseNameParameter
      DBInstanceIdentifier: !Sub "debateitdb-${EnvironmentParameter}"
      DBInstanceClass: "db.t3.micro"
      DBSubnetGroupName: public-subnet-group
      Engine: postgres
      MasterUsername: !Sub '{{resolve:secretsmanager:${DebateItDBSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DebateItDBSecret}::password}}'
      PubliclyAccessible: true
      SourceRegion: us-east-1
      VPCSecurityGroups: [!Ref DBSecurityGroup]
  DebateItDBSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties: 
      SecretId: !Ref DebateItDBSecret
      TargetId: !Ref DebateItDB
      TargetType: AWS::RDS::DBInstance
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      BinaryMediaTypes:
        - "*~1*"
  ORMLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
          LayerName: orm-layer
          Description: SQLAlchemy models and utilities
          ContentUri: ./orm_layer/
          CompatibleRuntimes:
            - python3.9
          LicenseInfo: 'MIT'
          RetentionPolicy: Retain
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "debateit-bucket-${EnvironmentParameter}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
              - GET
            AllowedOrigins:
              - '*'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [x86_64]
      CodeUri: api/app
      Environment:
        Variables:
          LOG_LEVEL: !Sub "${LogLevel}"
          DB_SECRET_NAME: !Ref DebateItDBSecret
          S3_BUCKET: !Ref S3Bucket
      Events:
        GetDebateList:
          Type: Api
          Properties:
            Path: /debate/list
            Method: get
            RestApiId: !Ref APIGateway
        CreateDebate:
          Type: Api
          Properties:
            Path: /debate
            Method: post
            RestApiId: !Ref APIGateway
        UploadDebatePicture:
          Type: Api
          Properties:
            Path: /debate/{debate_id}/file
            Method: put
            RestApiId: !Ref APIGateway
        HelloEvent:
          Type: Api
          Properties:
            Path: /health
            Method: get
            RestApiId: !Ref APIGateway
      Handler: src.handler.lambda_handler
      Layers:
        - !Ref ORMLayer
      Policies: [SecretsManagerReadWrite]
      Runtime: python3.9
      Timeout: 30
      Tracing: Active
